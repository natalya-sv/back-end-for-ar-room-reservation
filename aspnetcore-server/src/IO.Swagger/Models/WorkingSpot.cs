/*
 * Room Reservation API
 *
 * A Simple IP Address API
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkingSpot : IEquatable<WorkingSpot>
    { 
        /// <summary>
        /// Gets or Sets WorkingSpotId
        /// </summary>
        [DataMember(Name="workingSpotId")]
        public int? WorkingSpotId { get; private set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name="locationId")]
        public int? LocationId { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location")]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets WorkingSpotReservations
        /// </summary>
        [DataMember(Name="workingSpotReservations")]
        public List<WorkingSpotReservation> WorkingSpotReservations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkingSpot {\n");
            sb.Append("  WorkingSpotId: ").Append(WorkingSpotId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  WorkingSpotReservations: ").Append(WorkingSpotReservations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkingSpot)obj);
        }

        /// <summary>
        /// Returns true if WorkingSpot instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkingSpot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkingSpot other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    WorkingSpotId == other.WorkingSpotId ||
                    WorkingSpotId != null &&
                    WorkingSpotId.Equals(other.WorkingSpotId)
                ) && 
                (
                    LocationId == other.LocationId ||
                    LocationId != null &&
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    WorkingSpotReservations == other.WorkingSpotReservations ||
                    WorkingSpotReservations != null &&
                    WorkingSpotReservations.SequenceEqual(other.WorkingSpotReservations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (WorkingSpotId != null)
                    hashCode = hashCode * 59 + WorkingSpotId.GetHashCode();
                    if (LocationId != null)
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (WorkingSpotReservations != null)
                    hashCode = hashCode * 59 + WorkingSpotReservations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkingSpot left, WorkingSpot right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkingSpot left, WorkingSpot right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
