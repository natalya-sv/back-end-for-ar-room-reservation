/*
 * Room Reservation API
 *
 * A Simple IP Address API
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MeetingRoomImage : IEquatable<MeetingRoomImage>
    { 
        /// <summary>
        /// Gets or Sets MeetingRoomImageId
        /// </summary>
        [DataMember(Name="meetingRoomImageId")]
        public int? MeetingRoomImageId { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image")]
        public byte[] Image { get; set; }

        /// <summary>
        /// Gets or Sets ImageWidth
        /// </summary>
        [DataMember(Name="imageWidth")]
        public decimal? ImageWidth { get; set; }

        /// <summary>
        /// Gets or Sets MeetingRoomId
        /// </summary>
        [DataMember(Name="meetingRoomId")]
        public int? MeetingRoomId { get; set; }

        /// <summary>
        /// Gets or Sets MeetingRoom
        /// </summary>
        [DataMember(Name="meetingRoom")]
        public MeetingRoom MeetingRoom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeetingRoomImage {\n");
            sb.Append("  MeetingRoomImageId: ").Append(MeetingRoomImageId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ImageWidth: ").Append(ImageWidth).Append("\n");
            sb.Append("  MeetingRoomId: ").Append(MeetingRoomId).Append("\n");
            sb.Append("  MeetingRoom: ").Append(MeetingRoom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MeetingRoomImage)obj);
        }

        /// <summary>
        /// Returns true if MeetingRoomImage instances are equal
        /// </summary>
        /// <param name="other">Instance of MeetingRoomImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeetingRoomImage other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MeetingRoomImageId == other.MeetingRoomImageId ||
                    MeetingRoomImageId != null &&
                    MeetingRoomImageId.Equals(other.MeetingRoomImageId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.Equals(other.Image)
                ) && 
                (
                    ImageWidth == other.ImageWidth ||
                    ImageWidth != null &&
                    ImageWidth.Equals(other.ImageWidth)
                ) && 
                (
                    MeetingRoomId == other.MeetingRoomId ||
                    MeetingRoomId != null &&
                    MeetingRoomId.Equals(other.MeetingRoomId)
                ) && 
                (
                    MeetingRoom == other.MeetingRoom ||
                    MeetingRoom != null &&
                    MeetingRoom.Equals(other.MeetingRoom)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MeetingRoomImageId != null)
                    hashCode = hashCode * 59 + MeetingRoomImageId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (ImageWidth != null)
                    hashCode = hashCode * 59 + ImageWidth.GetHashCode();
                    if (MeetingRoomId != null)
                    hashCode = hashCode * 59 + MeetingRoomId.GetHashCode();
                    if (MeetingRoom != null)
                    hashCode = hashCode * 59 + MeetingRoom.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MeetingRoomImage left, MeetingRoomImage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MeetingRoomImage left, MeetingRoomImage right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
