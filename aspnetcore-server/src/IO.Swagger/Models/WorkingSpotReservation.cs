/*
 * Room Reservation API
 *
 * A Simple IP Address API
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkingSpotReservation : IEquatable<WorkingSpotReservation>
    { 
        /// <summary>
        /// Gets or Sets WorkingSpotReservationId
        /// </summary>
        [DataMember(Name="workingSpotReservationId")]
        public int? WorkingSpotReservationId { get; private set; }

        /// <summary>
        /// Gets or Sets ReservationDate
        /// </summary>
        [DataMember(Name="reservationDate")]
        public DateTime? ReservationDate { get; set; }

        /// <summary>
        /// Gets or Sets WorkingSpotId
        /// </summary>
        [DataMember(Name="workingSpotId")]
        public int? WorkingSpotId { get; set; }

        /// <summary>
        /// Gets or Sets WorkingSpot
        /// </summary>
        [DataMember(Name="workingSpot")]
        public WorkingSpot WorkingSpot { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user")]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId")]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkingSpotReservation {\n");
            sb.Append("  WorkingSpotReservationId: ").Append(WorkingSpotReservationId).Append("\n");
            sb.Append("  ReservationDate: ").Append(ReservationDate).Append("\n");
            sb.Append("  WorkingSpotId: ").Append(WorkingSpotId).Append("\n");
            sb.Append("  WorkingSpot: ").Append(WorkingSpot).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkingSpotReservation)obj);
        }

        /// <summary>
        /// Returns true if WorkingSpotReservation instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkingSpotReservation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkingSpotReservation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    WorkingSpotReservationId == other.WorkingSpotReservationId ||
                    WorkingSpotReservationId != null &&
                    WorkingSpotReservationId.Equals(other.WorkingSpotReservationId)
                ) && 
                (
                    ReservationDate == other.ReservationDate ||
                    ReservationDate != null &&
                    ReservationDate.Equals(other.ReservationDate)
                ) && 
                (
                    WorkingSpotId == other.WorkingSpotId ||
                    WorkingSpotId != null &&
                    WorkingSpotId.Equals(other.WorkingSpotId)
                ) && 
                (
                    WorkingSpot == other.WorkingSpot ||
                    WorkingSpot != null &&
                    WorkingSpot.Equals(other.WorkingSpot)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (WorkingSpotReservationId != null)
                    hashCode = hashCode * 59 + WorkingSpotReservationId.GetHashCode();
                    if (ReservationDate != null)
                    hashCode = hashCode * 59 + ReservationDate.GetHashCode();
                    if (WorkingSpotId != null)
                    hashCode = hashCode * 59 + WorkingSpotId.GetHashCode();
                    if (WorkingSpot != null)
                    hashCode = hashCode * 59 + WorkingSpot.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkingSpotReservation left, WorkingSpotReservation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkingSpotReservation left, WorkingSpotReservation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
