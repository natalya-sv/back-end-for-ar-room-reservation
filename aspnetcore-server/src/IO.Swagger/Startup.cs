/*
 * Room Reservation API
 *
 * A Simple IP Address API
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using Swashbuckle.AspNetCore.Swagger;
using Swashbuckle.AspNetCore.SwaggerGen;
using IO.Swagger.Filters;
using Microsoft.EntityFrameworkCore;
using IO.Swagger.Models;
using Microsoft.AspNetCore.Server.Kestrel.Core;

namespace IO.Swagger
{
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
		private readonly IWebHostEnvironment _hostingEnv;

		private IConfiguration Configuration { get; }

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="env"></param>
		/// <param name="configuration"></param>
		public Startup(IWebHostEnvironment env, IConfiguration configuration)
		{
			_hostingEnv = env;
			Configuration = configuration;
		}

		/// <summary>
		/// This method gets called by the runtime. Use this method to add services to the container.
		/// </summary>
		/// <param name="services"></param>
		public void ConfigureServices(IServiceCollection services)
		{
			// Add framework services.
			services
				.AddMvc(options =>
				{
					options.InputFormatters.RemoveType<Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter>();
					options.OutputFormatters.RemoveType<Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter>();
				})
				.AddNewtonsoftJson(opts =>
				{
					opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
					opts.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;
					opts.SerializerSettings.DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc;
					opts.SerializerSettings.Converters.Add(new DateTimeConverter());
				})
				.AddXmlSerializerFormatters();
			services
				.AddSwaggerGen(c =>
				{
					c.SwaggerDoc("0.1.9", new OpenApiInfo
					{
						Version = "0.1.9",
						Title = "Room Reservation API",
						Description = "Room Reservation API (ASP.NET Core 3.1)",
						Contact = new OpenApiContact()
						{
							Name = "Swagger Codegen Contributors",
							Url = new Uri("https://github.com/swagger-api/swagger-codegen"),
							Email = ""
						},
						TermsOfService = new Uri("https://github.com/swagger-api/swagger-codegen")
					});
					c.CustomSchemaIds(type => type.FullName);
					c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{_hostingEnv.ApplicationName}.xml");
					// Sets the basePath property in the Swagger document generated
					c.DocumentFilter<BasePathFilter>("/api");

					// Include DataAnnotation attributes on Controller Action parameters as Swagger validation rules (e.g required, pattern, ..)
					// Use [ValidateModelState] on Actions to actually validate it in C# as well!
					//                    c.OperationFilter<GeneratePathParamsValidationFilter>();
				});
			services.AddControllers(options => options.SuppressAsyncSuffixInActionNames = false);
			services.AddDbContext<ProjectContext>(options =>
		   options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

			services.Configure<KestrelServerOptions>(options =>
			{
				options.AllowSynchronousIO = true;

			});
		}

		/// <summary>
		/// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
		/// </summary>
		/// <param name="app"></param>
		/// <param name="env"></param>
		/// <param name="loggerFactory"></param>
		public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory)
		{
			app.UseRouting();

			// app.UseStaticFiles();

			app.UseAuthorization();
			app.UseHttpsRedirection();
			app.UseSwagger();
			app.UseSwaggerUI(c =>
			{
				//TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)
				c.SwaggerEndpoint("/swagger/0.1.9/swagger.json", "Rooms Reservation API");

				//TODO: Or alternatively use the original Swagger contract that's included in the static files
				// c.SwaggerEndpoint("/swagger-original.json", "Room Reservation API Original");
			});

			app.UseEndpoints(endpoints =>
			{
				endpoints.MapDefaultControllerRoute();
			});

			if (env.IsDevelopment())
			{
				app.UseDeveloperExceptionPage();
			}
			else
			{
				app.UseExceptionHandler("/Error");
				app.UseHsts();
			}
		}
	}
}
