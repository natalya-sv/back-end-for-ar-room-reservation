/*
 * Room Reservation API
 *
 * A Simple IP Address API
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.Linq;

namespace IO.Swagger.Controllers
{
	[Route("api/[controller]")]
    [ApiController]
    public class WorkingSpotReservationApiController : ControllerBase
    {
        private readonly ProjectContext _context;

        public WorkingSpotReservationApiController(ProjectContext context)
        {
            _context = context;
        }
        /// <summary>
        /// Deletes a workingSpotReservation
        /// </summary>
        /// <param name="workingSpotReservationId"></param>
        /// <response code="204">Deleted</response>
        /// <response code="404">WorkingSpotReservation not found</response>
        [HttpDelete]
        [Route("/api/workingSpotsreservations/{workingSpotReservationId}")]
        [ValidateModelState]
        [SwaggerOperation("WorkingSpotsreservationsWorkingSpotReservationIdDelete")]
        public async Task<ActionResult<IEnumerable<WorkingSpotReservation>>> WorkingSpotsreservationsWorkingSpotReservationIdDelete([FromRoute][Required]int? workingSpotReservationId)
        {
            var reservations = await _context.WorkingSpotReservations
                 .Include(u => u.User)
                 .AsNoTracking()
                 .ToListAsync();

            if (reservations == null)
            {
                return BadRequest();
            }
            return reservations;
        }

	
        /// <summary>
        /// Returns a list of workingSpotReservation
        /// </summary>
        /// <response code="200">An array of workingSpotReservations</response>
        /// <response code="404">WorkingSpot Reservations not found</response>
        [HttpGet]
        [Route("/api/workingSpotReservations")]
        [ValidateModelState]
        [SwaggerOperation("WorkingSpotReservationsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<WorkingSpotReservation>), description: "An array of workingSpotReservations")]
        public async Task<ActionResult<IEnumerable<WorkingSpotReservation>>> WorkingSpotReservationsGet()
        {
            var reservations = await _context.WorkingSpotReservations
                   .Include(u => u.User)
                   .AsNoTracking()
                   .ToListAsync();

            if (reservations == null)
            {
                return BadRequest();
            }
            return reservations;
        }

        /// <summary>
        /// Creates a new workingSpotReservation
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Created</response>
        /// <response code="409">Conflict</response>
        [HttpPost]
        [Route("/api/workingSpotReservations")]
        [ValidateModelState]
        [SwaggerOperation("WorkingSpotReservationsPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(WorkingSpotReservation), description: "Created")]
        public async Task<ActionResult<WorkingSpotReservation>> WorkingSpotReservationsPost([FromBody] WorkingSpotReservation body)
        {
            var user = await _context.Users.AsNoTracking().FirstOrDefaultAsync(u => u.UserId == body.UserId);
            var workingSpot = await _context.WorkingSpots.AsNoTracking().FirstOrDefaultAsync(m => m.WorkingSpotId == body.WorkingSpotId);

            if (user == null || workingSpot == null)
            {
                return NotFound();
            }

            var reservation = new WorkingSpotReservation
            {
                WorkingSpotId = body.WorkingSpotId,
                UserId = user.UserId,
                ReservationDate = body.ReservationDate,

            };

            _context.WorkingSpotReservations.Add(reservation);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(WorkingSpotReservationsGet), new { id = body.WorkingSpotReservationId }, reservation);
        }

        /// <summary>
        /// Returns a WorkingSpotReservation info by ID
        /// </summary>
        /// <param name="workingSpotReservationId">ID of a workingSpotReservation</param>
        /// <response code="200">OK</response>
        /// <response code="404">WorkingSpotReservation not found</response>
        [HttpGet]
        [Route("/api/workingSpotsreservations/{workingSpotReservationId}")]
        [ValidateModelState]
        [SwaggerOperation("WorkingSpotsreservationsWorkingSpotReservationIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkingSpotReservation), description: "OK")]
        public async Task<ActionResult<WorkingSpotReservation>> WorkingSpotsreservationsWorkingSpotReservationIdGet([FromRoute][Required] int? workingSpotReservationId)
        {
            var spotReservation = await _context.WorkingSpotReservations
                   .Include(w => w.WorkingSpot)
                       .ThenInclude(e => e.Location)
                           .ThenInclude(c => c.City)
                   .Include(u => u.User)
                       .ThenInclude(j => j.Job)
                   .FirstOrDefaultAsync(i => i.WorkingSpotReservationId == workingSpotReservationId);

            if (spotReservation == null)
            {
                return NotFound();
            }

            return spotReservation;
        }

        /// <summary>
        /// Update an existing workingSpot
        /// </summary>
        /// <param name="body"></param>
        /// <param name="workingSpotReservationId">ID of a workingSpotReservation</param>
        /// <response code="204">Updated</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">WorkingSpotReservation not found</response>
        [HttpPut]
        [Route("/api/workingSpotsreservations/{workingSpotReservationId}")]
        [ValidateModelState]
        [SwaggerOperation("WorkingSpotsreservationsWorkingSpotReservationIdPut")]
        public async Task<ActionResult<WorkingSpotReservation>> WorkingSpotsreservationsWorkingSpotReservationIdPut([FromBody] WorkingSpotReservation body, [FromRoute][Required] int? workingSpotReservationId)
        {
            var spotReservation = await _context.WorkingSpotReservations
                 .Include(w => w.WorkingSpot)
                     .ThenInclude(e => e.Location)
                         .ThenInclude(c => c.City)
                 .Include(u => u.User)
                     .ThenInclude(j => j.Job)
                 .FirstOrDefaultAsync(i => i.WorkingSpotReservationId == workingSpotReservationId);

            if (spotReservation == null)
            {
                return NotFound();
            }

            return spotReservation;
        }
        private bool SpotReservationExists(int id)
		{
			return _context.WorkingSpotReservations.Any(e => e.WorkingSpotReservationId == id);
		}
	}
}
