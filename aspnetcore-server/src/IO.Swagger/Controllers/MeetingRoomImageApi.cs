/*
 * Room Reservation API
 *
 * A Simple IP Address API
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace IO.Swagger.Controllers
{
	[Route("api/[controller]")]
	[ApiController]
	public class MeetingRoomImageApiController : ControllerBase
	{
		private readonly ProjectContext _context;
		public MeetingRoomImageApiController(ProjectContext context)
		{
			_context = context;
		}
		/// <summary>
		/// Deletes a room
		/// </summary>
		/// <param name="imageName"></param>
		/// <response code="204">Deleted</response>
		/// <response code="404">RoomImage not found</response>
		[HttpDelete]
		[Route("/api/meetingRoomImage/{imageName}")]
		[ValidateModelState]
		[SwaggerOperation("MeetingRoomImageImageNameDelete")]
		public async Task<IActionResult> MeetingRoomImageImageNameDelete([FromRoute][Required] string imageName)
		{
			var meetingRoomImage = await _context.MeetingRoomImages
				.AsNoTracking()
				.FirstOrDefaultAsync(i => i.Name == imageName);

			if (meetingRoomImage == null)
			{
				return NotFound();
			}

			_context.MeetingRoomImages.Remove(meetingRoomImage);
			await _context.SaveChangesAsync();

			return NoContent();
		}

		/// <summary>
		/// Returns meeting room Image by imagename
		/// </summary>
		/// <param name="imageName">imagename of a meetingRoomImage</param>
		/// <response code="200">successful operation</response>
		/// <response code="404">Meeting Room Image not found</response>
		[HttpGet]
		[Route("/api/meetingRoomImage/{imageName}")]
		[ValidateModelState]
		[SwaggerOperation("MeetingRoomImageImageNameGet")]
		[SwaggerResponse(statusCode: 200, type: typeof(MeetingRoomImage), description: "successful operation")]
		public async Task<ActionResult<MeetingRoomImage>> MeetingRoomImageImageNameGet([FromRoute][Required] string imageName)
		{
			var meetingRoomImage = await _context.MeetingRoomImages
			   .AsNoTracking()
			   .FirstOrDefaultAsync(i => i.Name == imageName);

			if (meetingRoomImage == null)
			{
				return NotFound();
			}

			return meetingRoomImage;
		}

		/// <summary>
		/// Update an existing room
		/// </summary>
		/// <param name="body"></param>
		/// <param name="imageName"></param>
		/// <response code="204">Updated</response>
		/// <response code="400">Bad Request</response>
		/// <response code="404">Room not found</response>
		[HttpPut]
		[Route("/api/meetingRoomImage/{imageName}")]
		[ValidateModelState]
		[SwaggerOperation("MeetingRoomImageImageNamePut")]
		public async Task<IActionResult> MeetingRoomImageImageNamePut([FromBody] MeetingRoomImage body, [FromRoute][Required] string imageName)
		{
			if (body.Name != imageName)
			{
				return BadRequest();
			}

			var meetingRoomImage = await _context.MeetingRoomImages
				.AsNoTracking()
				.FirstOrDefaultAsync(i => i.Name == body.Name);

			if (meetingRoomImage == null || body.Name != imageName)
			{
				return NotFound();
			}

			_context.MeetingRoomImages.Update(body);
			await _context.SaveChangesAsync();

			return NoContent();
		}


		/// <summary>
		/// Creates a new image
		/// </summary>
		/// <param name="body"></param>
		/// <response code="201">Created</response>
		/// <response code="409">Conflict</response>
		[HttpPost]
		[Route("/api/meetingRoomImage")]
		[ValidateModelState]
		[SwaggerOperation("MeetingRoomImagePost")]
		[SwaggerResponse(statusCode: 201, type: typeof(MeetingRoomImage), description: "Created")]
		public async Task<IActionResult> MeetingRoomImagePost([FromBody] MeetingRoomImage body)
		{
			var meetingRoomImage = await _context.MeetingRoomImages
				   .AsNoTracking()
				   .FirstOrDefaultAsync(i => i.Name == body.Name);

			if (meetingRoomImage != null)
			{
				return BadRequest();
			}
			_context.MeetingRoomImages.Add(body);
			await _context.SaveChangesAsync();

			return CreatedAtAction(nameof(MeetingRoomImageImageNameGet), new { name = meetingRoomImage.Name }, meetingRoomImage);
		}
	}
}
