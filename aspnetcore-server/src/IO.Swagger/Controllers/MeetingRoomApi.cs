/*
 * Room Reservation API
 *
 * A Simple IP Address API
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.Linq;

namespace IO.Swagger.Controllers
{
	[Route("api/[controller]")]
    [ApiController]
    public class MeetingRoomApiController : ControllerBase
    {
        private readonly ProjectContext _context;
        public MeetingRoomApiController(ProjectContext context)
        {
            _context = context;
        }
        /// <summary>
        /// Returns a list of rooms
        /// </summary>
        /// <response code="200">An array of meeting rooms</response>
        /// <response code="404">Rooms not found</response>
        [HttpGet]
        [Route("/api/meetingRooms")]
        [ValidateModelState]
        [SwaggerOperation("MeetingRoomsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MeetingRoom>), description: "An array of meeting rooms")]
        public async Task<ActionResult<IEnumerable<MeetingRoom>>> MeetingRoomsGet()
        {
            var meetingRooms = await _context.MeetingRooms
                .Include(l => l.MeetingRoomLocation)
                .ThenInclude(l => l.City)
                .AsNoTracking()
                .ToListAsync();

            if (meetingRooms == null)
            {
                return NotFound();
            }

            return meetingRooms;
        }

        /// <summary>
        /// Returns room by an image name
        /// </summary>
        /// <param name="imageName"></param>
        /// <response code="200">A room object</response>
        /// <response code="404">Room not found</response>
        [HttpGet]
        [Route("/api/meetingRooms/image/{imageName}")]
        [ValidateModelState]
        [SwaggerOperation("MeetingRoomsImageImageNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MeetingRoom), description: "A room object")]
        public async Task<ActionResult<MeetingRoom>> MeetingRoomsImageImageNameGet([FromRoute][Required]string imageName)
        {
            var meetingRoom = await _context.MeetingRooms
                 .Include(im => im.MeetingRoomImage)
                 .Include(l => l.MeetingRoomLocation)
                     .ThenInclude(c => c.City)
                 .Include(r => r.MeetingRoomReservations)
                     .ThenInclude(u => u.User)
                     .ThenInclude(j => j.Job)
                 .AsNoTracking()
                 .FirstOrDefaultAsync(m => m.MeetingRoomImage.Name == imageName);

            if (meetingRoom == null)
            {
                return NotFound();
            }

            if (meetingRoom.MeetingRoomReservations.Count > 0)
            {
                var timeNow = DateTime.Now.TimeOfDay;

                var dateNow = DateTime.Today;


                var requiredReservations = meetingRoom.MeetingRoomReservations
                     .Where(r => r.EndTime > timeNow && r.MeetingDate == dateNow)
                    .ToList();

                meetingRoom.MeetingRoomReservations = requiredReservations;
            }

            return meetingRoom;
        }

        /// <summary>
        /// Deletes a room
        /// </summary>
        /// <param name="meetingRoomId"></param>
        /// <response code="204">Deleted</response>
        /// <response code="404">Room not found</response>
        [HttpDelete]
        [Route("/api/meetingRooms/{meetingRoomId}")]
        [ValidateModelState]
        [SwaggerOperation("MeetingRoomsMeetingRoomIdDelete")]
        public async Task<IActionResult> MeetingRoomsMeetingRoomIdDelete([FromRoute][Required]int? meetingRoomId)
        {
            var meetingRoom = await _context.MeetingRooms
               .AsNoTracking()
               .FirstOrDefaultAsync(m => m.MeetingRoomId == meetingRoomId);

            if (meetingRoom == null)
            {
                return NotFound();
            }

            _context.MeetingRooms.Remove(meetingRoom);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        /// <summary>
        /// Returns a meeting room by meetingRoomId
        /// </summary>
        /// <param name="meetingRoomId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Room not found</response>
        [HttpGet]
        [Route("/api/meetingRooms/{meetingRoomId}")]
        [ValidateModelState]
        [SwaggerOperation("MeetingRoomsMeetingRoomIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MeetingRoom), description: "OK")]
        public async Task<ActionResult<MeetingRoom>> MeetingRoomsMeetingRoomIdGet([FromRoute][Required]int? meetingRoomId)
        {
            var meetingRoom = await _context.MeetingRooms
               .Include(im => im.MeetingRoomImage)
               .Include(l => l.MeetingRoomLocation)
                   .ThenInclude(c => c.City)
               .Include(r => r.MeetingRoomReservations)
                   .ThenInclude(u => u.User)
                   .ThenInclude(j => j.Job)
               .AsNoTracking()
               .FirstOrDefaultAsync(m => m.MeetingRoomId == meetingRoomId);

            if (meetingRoom == null)
            {
                return NotFound();
            }

            if (meetingRoom.MeetingRoomReservations.Count > 0)
            {
                var requiredReservations = meetingRoom.MeetingRoomReservations.ToList();
                meetingRoom.MeetingRoomReservations = requiredReservations;
            }

            return meetingRoom;
        }

        /// <summary>
        /// Updates an existing room
        /// </summary>
        /// <param name="body"></param>
        /// <param name="meetingRoomId">ID of a meeting room</param>
        /// <response code="204">Updated</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Room not found</response>
        [HttpPut]
        [Route("/api/meetingRooms/{meetingRoomId}")]
        [ValidateModelState]
        [SwaggerOperation("MeetingRoomsMeetingRoomIdPut")]
        public async Task<IActionResult> MeetingRoomsMeetingRoomIdPut([FromBody]MeetingRoom body, [FromRoute][Required]int? meetingRoomId)
        {
            if (body.MeetingRoomId != meetingRoomId)
            {
                return BadRequest();
            }

            var meetingRoom = await _context.MeetingRooms
                .AsNoTracking()
                .FirstOrDefaultAsync(m => m.MeetingRoomId == meetingRoomId);

            if (meetingRoom == null)
            {
                return NotFound();
            }

            _context.MeetingRooms.Update(body);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        /// <summary>
        /// Creates a new room
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Created</response>
        /// <response code="409">Conflict</response>
        [HttpPost]
        [Route("/api/meetingRooms")]
        [ValidateModelState]
        [SwaggerOperation("MeetingRoomsPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(MeetingRoom), description: "Created")]
        public async Task<IActionResult> MeetingRoomsPost([FromBody]MeetingRoom body)
        {
            var meetingRoom = await _context.MeetingRooms
               .FirstOrDefaultAsync(m => m.MeetingRoomEmail == body.MeetingRoomEmail);

            if (meetingRoom != null)
            {
                return Conflict();
            }

            _context.MeetingRooms.Add(body);
            await _context.SaveChangesAsync();
            return CreatedAtAction("MeetingRoomsMeetingRoomIdGet", new { id = meetingRoom.MeetingRoomId }, meetingRoom);
        }
    }
}
