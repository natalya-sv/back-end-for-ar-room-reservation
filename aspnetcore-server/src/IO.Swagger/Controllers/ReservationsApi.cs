/*
 * Room Reservation API
 *
 * A Simple IP Address API
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.Linq;

namespace IO.Swagger.Controllers
{
	[Route("api/[controller]")]
    [ApiController]
    public class ReservationsApiController : ControllerBase
    {
        private readonly ProjectContext _context;
        public ReservationsApiController(ProjectContext context)
        {
            _context = context;
        }


        /// <summary>
        /// Creates a new reservation
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Created</response>
        /// <response code="409">Conflict</response>
        [HttpPost]
        [Route("/api/reservations")]
        [ValidateModelState]
        [SwaggerOperation("ReservationsPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(MeetingRoomReservation), description: "Created")]
        public async Task<ActionResult<MeetingRoomReservation>> ReservationsPost([FromBody]MeetingRoomReservation body)
        {
            var user = await _context.Users.AsNoTracking()
                .Include(j => j.Job)
                .FirstOrDefaultAsync(u => u.UserId == body.UserId);

            var meetingRoom = await _context.MeetingRooms.AsNoTracking()
                .Include(l => l.MeetingRoomLocation)
                .FirstOrDefaultAsync(m => m.MeetingRoomId == body.MeetingRoomId);

            if (user == null || meetingRoom == null)
            {
                return NotFound();
            }

            var reservation = new MeetingRoomReservation
            {
                MeetingDate = body.MeetingDate,
                StartTime = body.StartTime,
                EndTime = body.EndTime,
                MeetingTopic = body.MeetingTopic,
                UserId = body.UserId,
                MeetingRoomId = body.MeetingRoomId
            };

            _context.MeetingRoomReservations.Add(reservation);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(ReservationsReservationIdGet), new { id = reservation.MeetingRoomReservationId }, reservation);
        }

        /// <summary>
        /// Deletes a reservation
        /// </summary>
        /// <param name="reservationId"></param>
        /// <response code="204">Deleted</response>
        /// <response code="404">Reservation not found</response>
        [HttpDelete]
        [Route("/api/reservations/{reservationId}")]
        [ValidateModelState]
        [SwaggerOperation("ReservationsReservationIdDelete")]
        public async Task<IActionResult> ReservationsReservationIdDelete([FromRoute][Required]int? reservationId)
        {
            var reservation = await _context.MeetingRoomReservations.AsNoTracking().FirstOrDefaultAsync(r => r.MeetingRoomReservationId == reservationId);

            if (reservation == null)
            {
                return NotFound();
            }

            _context.MeetingRoomReservations.Remove(reservation);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        /// <summary>
        /// Returns reservation by ID
        /// </summary>
        /// <param name="reservationId">ID of a reservation</param>
        /// <response code="200">successful operation</response>
        /// <response code="404">Reservation not found</response>
        [HttpGet]
        [Route("/api/reservations/{reservationId}")]
        [ValidateModelState]
        [SwaggerOperation("ReservationsReservationIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MeetingRoomReservation), description: "successful operation")]
        public async Task<ActionResult<MeetingRoomReservation>> ReservationsReservationIdGet([FromRoute][Required]int? reservationId)
        {
            var reservation = await _context.MeetingRoomReservations
               .Include(m => m.MeetingRoom)
                   .ThenInclude(l => l.MeetingRoomLocation)
                       .ThenInclude(c => c.City)
               .Include(u => u.User)
                   .ThenInclude(j => j.Job)
               .AsNoTracking()
               .FirstOrDefaultAsync(r => r.MeetingRoomReservationId == reservationId);

            if (reservation == null)
            {
                return NotFound();
            }

            return reservation;
        }

        /// <summary>
        /// Updates an existing reservation
        /// </summary>
        /// <param name="body"></param>
        /// <param name="reservationId">ID of a reservation</param>
        /// <response code="200">Updated</response>
        /// <response code="400">Bad request</response>
        /// <response code="404">Room not found</response>
        [HttpPut]
        [Route("/api/reservations/{reservationId}")]
        [ValidateModelState]
        [SwaggerOperation("ReservationsReservationIdPut")]
        public async Task<IActionResult> ReservationsReservationIdPut([FromBody]MeetingRoomReservation body, [FromRoute][Required]int? reservationId)
        {
            if (body.MeetingRoomReservationId != reservationId)
            {
                return BadRequest();
            }

            var reservation = await _context.MeetingRoomReservations.AsNoTracking().FirstOrDefaultAsync(r => r.MeetingRoomReservationId == body.MeetingRoomReservationId);

            if (reservation == null)
            {
                return NotFound();
            }

            _context.MeetingRoomReservations.Update(body);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool ReservationExists(int id)
        {
            return _context.MeetingRoomReservations.Any(e => e.MeetingRoomReservationId == id);
        }
    }
}
