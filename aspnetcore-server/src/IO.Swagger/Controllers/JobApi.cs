/*
 * Room Reservation API
 *
 * A Simple IP Address API
 *
 * OpenAPI spec version: 0.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.Linq;

namespace IO.Swagger.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class JobApiController : ControllerBase
    {
        private readonly ProjectContext _context;

        public JobApiController(ProjectContext context)
        {
            _context = context;
        }
        /// <summary>
        /// Returns a list of jobs
        /// </summary>
        /// <response code="200">An array of jobs</response>
        /// <response code="404">Jobs not found</response>
        [HttpGet]
        [Route("/api/jobs")]
        [ValidateModelState]
        [SwaggerOperation("JobsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Job>), description: "An array of jobs")]
        public async Task<ActionResult<IEnumerable<Job>>> JobsGet()
        {
            return await _context.Jobs.ToListAsync();
        }

        /// <summary>
        /// Deletes a job
        /// </summary>
        /// <param name="jobId"></param>
        /// <response code="204">Deleted</response>
        /// <response code="404">Job not found</response>
        [HttpDelete]
        [Route("/api/jobs/{jobId}")]
        [ValidateModelState]
        [SwaggerOperation("JobsJobIdDelete")]
        public async Task<ActionResult> JobsJobIdDelete([FromRoute][Required]int jobId)
        {
            var job = await _context.Jobs.FindAsync(jobId);
            if (job == null)
            {
                return NotFound();
            }

            _context.Jobs.Remove(job);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        /// <summary>
        /// Returns a job by ID
        /// </summary>
        /// <param name="jobId">ID of a job</param>
        /// <response code="200">OK</response>
        /// <response code="404">Job not found</response>
        [HttpGet]
        [Route("/api/jobs/{jobId}")]
        [ValidateModelState]
        [SwaggerOperation("JobsJobIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Job), description: "OK")]
        public async Task<ActionResult<Job>> JobsJobIdGet([FromRoute][Required]int jobId)
        {
            var job = await _context.Jobs.FindAsync(jobId);

            if (job == null)
            {
                return NotFound();
            }

            return job;
        }

        /// <summary>
        /// Update an existing job
        /// </summary>
        /// <param name="body"></param>
        /// <param name="jobId">ID of a job</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="404">Job not found</response>
        [HttpPut]
        [Route("/api/jobs/{jobId}")]
        [ValidateModelState]
        [SwaggerOperation("JobsJobIdPut")]
        public async Task<IActionResult> JobsJobIdPut([FromBody]Job body, [FromRoute][Required]int jobId)
        {
            if (jobId != body.JobId)
            {
                return BadRequest();
            }

            _context.Entry(body).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!JobExists(jobId))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        /// <summary>
        /// Creates a new job
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Created</response>
        /// <response code="409">Conflict</response>
        [HttpPost]
        [Route("/api/jobs")]
        [ValidateModelState]
        [SwaggerOperation("JobsPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(Job), description: "Created")]
        public async Task<ActionResult<Job>> JobsPost([FromBody]Job body)
        {
            _context.Jobs.Add(body);
            await _context.SaveChangesAsync();

            return CreatedAtAction("JobsJobIdGet", new { id = body.JobId }, body);
        }

        private bool JobExists(int id)
        {
            return _context.Jobs.Any(e => e.JobId == id);
        }
    }
}
